// р╣Бр╕Бр╣Йр╣Др╕Вр╣Др╕Яр╕ер╣М src/components/lottery/CheckPage.js
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useLottery } from '../../context/LotteryContext';
import { LOTTERY_CATEGORIES } from '../../utils/constants';

const CheckPage = () => {
  const navigate = useNavigate();
  const { 
    selectedCategory, 
    setSelectedCategory, 
    selectedLotteryType, 
    setSelectedLotteryType 
  } = useLottery();
  const [checkNumber, setCheckNumber] = useState('');
  const [checkResult, setCheckResult] = useState(null);
  const [checkHistory, setCheckHistory] = useState([]);
  const [isChecking, setIsChecking] = useState(false);
  const [showCheckHistory, setShowCheckHistory] = useState(false);
  const [checkPageMode, setCheckPageMode] = useState('home'); // 'home' р╕лр╕гр╕╖р╕н 'check'

  // Mock lottery results
  const mockLotteryResults = {
    'р╕лр╕зр╕вр╕гр╕▒р╕Рр╕Ър╕▓р╕ер╣Др╕Чр╕в': {
      date: '2025-01-15',
      drawDate: '16 р╕бр╕Бр╕гр╕▓р╕Др╕б 2568',
      round: 'р╕Зр╕зр╕Фр╕Чр╕╡р╣И 1/2568',
      results: {
        first: '123456',
        firstNear: ['123455', '123457'],
        second: ['012345', '234567'],
        third: ['345678', '456789'],
        last3front: '123',
        last3back: '456',
        last2: '56'
      },
      prizes: {
        first: 6000000,
        firstNear: 100000,
        second: 200000,
        third: 80000,
        last3front: 4000,
        last3back: 4000,
        last2: 2000
      }
    },
    'р╕лр╕зр╕вр╕нр╕нр╕бр╕кр╕┤р╕Щ': {
      date: '2025-01-15',
      drawDate: '16 р╕бр╕Бр╕гр╕▓р╕Др╕б 2568',
      round: 'р╕Зр╕зр╕Фр╕Чр╕╡р╣И 1/2568',
      results: {
        first: '789012',
        last3front: '789',
        last3back: '012',
        last2: '12'
      },
      prizes: {
        first: 6000000,
        last3front: 4000,
        last3back: 4000,
        last2: 2000
      }
    },
    'р╕лр╕зр╕вр╕вр╕╡р╣Ир╕Бр╕╡ 15 р╕Щр╕▓р╕Чр╕╡': {
      date: '2025-01-17',
      drawDate: '17 р╕бр╕Бр╕гр╕▓р╕Др╕б 2568 14:30',
      round: 'р╕гр╕нр╕Ър╕Чр╕╡р╣И 97',
      results: {
        first: '13579',
        last3front: '135',
        last3back: '579',
        last2: '79'
      },
      prizes: {
        first: 50000,
        last3front: 5000,
        last3back: 5000,
        last2: 3000
      }
    }
  };

  const getCurrentResults = () => mockLotteryResults[selectedLotteryType] || mockLotteryResults['р╕лр╕зр╕вр╕гр╕▒р╕Рр╕Ър╕▓р╕ер╣Др╕Чр╕в'];
  const getCurrentCategory = () => LOTTERY_CATEGORIES[selectedCategory];

  // р╕Яр╕▒р╕Зр╕Кр╕▒р╣Ир╕Щр╕Хр╕гр╕зр╕Ир╕лр╕зр╕в
  const checkLotteryResult = async () => {
    if (!checkNumber || checkNumber.length < 2) {
      alert('р╕Бр╕гр╕╕р╕Ур╕▓р╣Гр╕кр╣Ир╣Ар╕ер╕Вр╕нр╕вр╣Ир╕▓р╕Зр╕Щр╣Йр╕нр╕в 2 р╕лр╕ер╕▒р╕Б');
      return;
    }

    setIsChecking(true);
    await new Promise(resolve => setTimeout(resolve, 1000));

    const results = getCurrentResults();
    const prizes = [];
    let totalWinning = 0;

    // р╕Хр╕гр╕зр╕Ир╕гр╕▓р╕Зр╕зр╕▒р╕ер╕Чр╕╡р╣И 1
    if (checkNumber === results.results.first) {
      prizes.push({ type: 'р╕гр╕▓р╕Зр╕зр╕▒р╕ер╕Чр╕╡р╣И 1', amount: results.prizes.first });
      totalWinning += results.prizes.first;
    }

    // р╕Хр╕гр╕зр╕Ир╕гр╕▓р╕Зр╕зр╕▒р╕ер╕Вр╣Йр╕▓р╕Зр╣Ар╕Др╕╡р╕вр╕З
    if (results.results.firstNear?.includes(checkNumber)) {
      prizes.push({ type: 'р╕гр╕▓р╕Зр╕зр╕▒р╕ер╕Вр╣Йр╕▓р╕Зр╣Ар╕Др╕╡р╕вр╕Зр╕гр╕▓р╕Зр╕зр╕▒р╕ер╕Чр╕╡р╣И 1', amount: results.prizes.firstNear });
      totalWinning += results.prizes.firstNear;
    }

    // р╕Хр╕гр╕зр╕Ир╕гр╕▓р╕Зр╕зр╕▒р╕ер╕Чр╕╡р╣И 2
    if (results.results.second?.includes(checkNumber)) {
      prizes.push({ type: 'р╕гр╕▓р╕Зр╕зр╕▒р╕ер╕Чр╕╡р╣И 2', amount: results.prizes.second });
      totalWinning += results.prizes.second;
    }

    // р╕Хр╕гр╕зр╕Ир╕гр╕▓р╕Зр╕зр╕▒р╕ер╕Чр╕╡р╣И 3
    if (results.results.third?.includes(checkNumber)) {
      prizes.push({ type: 'р╕гр╕▓р╕Зр╕зр╕▒р╕ер╕Чр╕╡р╣И 3', amount: results.prizes.third });
      totalWinning += results.prizes.third;
    }

    // р╕Хр╕гр╕зр╕Ир╣Ар╕ер╕Вр╕лр╕Щр╣Йр╕▓ 3 р╕Хр╕▒р╕з
    if (checkNumber.length >= 3 && results.results.last3front === checkNumber.slice(0, 3)) {
      prizes.push({ type: 'р╣Ар╕ер╕Вр╕лр╕Щр╣Йр╕▓ 3 р╕Хр╕▒р╕з', amount: results.prizes.last3front });
      totalWinning += results.prizes.last3front;
    }

    // р╕Хр╕гр╕зр╕Ир╣Ар╕ер╕Вр╕Чр╣Йр╕▓р╕в 3 р╕Хр╕▒р╕з
    if (checkNumber.length >= 3 && results.results.last3back === checkNumber.slice(-3)) {
      prizes.push({ type: 'р╣Ар╕ер╕Вр╕Чр╣Йр╕▓р╕в 3 р╕Хр╕▒р╕з', amount: results.prizes.last3back });
      totalWinning += results.prizes.last3back;
    }

    // р╕Хр╕гр╕зр╕Ир╣Ар╕ер╕Вр╕Чр╣Йр╕▓р╕в 2 р╕Хр╕▒р╕з
    if (checkNumber.length >= 2 && results.results.last2 === checkNumber.slice(-2)) {
      prizes.push({ type: 'р╣Ар╕ер╕Вр╕Чр╣Йр╕▓р╕в 2 р╕Хр╕▒р╕з', amount: results.prizes.last2 });
      totalWinning += results.prizes.last2;
    }

    const result = {
      number: checkNumber,
      lottery: selectedLotteryType,
      date: results.date,
      round: results.round,
      isWinner: prizes.length > 0,
      prizes: prizes,
      totalWinning: totalWinning,
      timestamp: new Date().toISOString()
    };

    setCheckResult(result);
    setCheckHistory(prev => [result, ...prev.slice(0, 9)]);
    setIsChecking(false);
  };

  const clearCheck = () => {
    setCheckNumber('');
    setCheckResult(null);
  };

  // р╕лр╕Щр╣Йр╕▓р╣Ар╕ер╕╖р╕нр╕Бр╕Ыр╕гр╕░р╣Ар╕ар╕Чр╕лр╕зр╕в (р╣Ар╕лр╕бр╕╖р╕нр╕Щр╣Гр╕Щр╕ар╕▓р╕Ю)
  if (checkPageMode === 'home') {
    return (
      <div className="space-y-6 animate-fadeIn">
        {/* р╕Ыр╕╕р╣Ир╕бр╕Бр╕ер╕▒р╕Ър╕лр╕Щр╣Йр╕▓р╣Бр╕гр╕Б */}
        <div className="flex items-center gap-3 mb-4">
          <button 
            onClick={() => navigate('/')}
            className="bg-gray-100 p-3 rounded-xl hover:bg-gray-200 transition-colors"
          >
            <span className="text-xl">ЁЯПа</span>
          </button>
          <h1 className="text-2xl font-bold text-gray-800">р╕Хр╕гр╕зр╕Ир╕Ьр╕ер╕гр╕▓р╕Зр╕зр╕▒р╕е</h1>
        </div>

        {/* р╕Бр╕гр╕┤р╕Фр╕Ыр╕гр╕░р╣Ар╕ар╕Чр╕лр╕зр╕в 2x2 (р╕Хр╕гр╕Зр╕Бр╕▒р╕Ър╕ар╕▓р╕Ю) */}
        <div className="grid grid-cols-2 gap-4">
          {/* р╕лр╕зр╕вр╕ер╕▓р╕з */}
          <button
            onClick={() => {
              setSelectedCategory('р╕лр╕зр╕вр╕ер╕▓р╕з');
              setSelectedLotteryType('р╕лр╕зр╕вр╕ер╕▓р╕зр╕Юр╕▒р╕Тр╕Щр╕▓');
            }}
            className={`p-6 rounded-2xl text-white font-bold transition-all min-h-32 flex flex-col items-center justify-center gap-3 ${
              selectedCategory === 'р╕лр╕зр╕вр╕ер╕▓р╕з' 
                ? 'bg-gray-500 shadow-lg' 
                : 'bg-gray-400'
            }`}
          >
            <span className="text-3xl">ЁЯЗ▒ЁЯЗж</span>
            <span className="text-lg">р╕лр╕зр╕вр╕ер╕▓р╕з</span>
          </button>

          {/* р╕лр╕зр╕вр╕ор╕▓р╕Щр╕нр╕в */}
          <button
            onClick={() => {
              setSelectedCategory('р╕лр╕зр╕вр╕ор╕▓р╕Щр╕нр╕в');
              setSelectedLotteryType('р╕лр╕зр╕вр╕ор╕▓р╕Щр╕нр╕вр╕Юр╕┤р╣Ар╕ир╕й');
            }}
            className={`p-6 rounded-2xl text-white font-bold transition-all min-h-32 flex flex-col items-center justify-center gap-3 ${
              selectedCategory === 'р╕лр╕зр╕вр╕ор╕▓р╕Щр╕нр╕в' 
                ? 'bg-gray-500 shadow-lg' 
                : 'bg-gray-400'
            }`}
          >
            <span className="text-3xl">ЁЯЗ╗ЁЯЗ│</span>
            <span className="text-lg">р╕лр╕зр╕вр╕ор╕▓р╕Щр╕нр╕в</span>
          </button>

          {/* р╕лр╕зр╕вр╕лр╕╕р╣Йр╕Щ */}
          <button
            onClick={() => {
              setSelectedCategory('р╕лр╕зр╕вр╕лр╕╕р╣Йр╕Щ');
              setSelectedLotteryType('р╕лр╕зр╕вр╕лр╕╕р╣Йр╕Щр╣Др╕Чр╕вр╣Ар╕вр╣Зр╕Щ');
            }}
            className={`p-6 rounded-2xl text-white font-bold transition-all min-h-32 flex flex-col items-center justify-center gap-3 ${
              selectedCategory === 'р╕лр╕зр╕вр╕лр╕╕р╣Йр╕Щ' 
                ? 'bg-gray-500 shadow-lg' 
                : 'bg-gray-400'
            }`}
          >
            <span className="text-3xl">ЁЯУИ</span>
            <span className="text-lg">р╕лр╕зр╕вр╕лр╕╕р╣Йр╕Щ</span>
          </button>

          {/* р╕лр╕зр╕вр╕лр╕╕р╣Йр╕Щр╕Хр╣Ир╕▓р╕Зр╕Ыр╕гр╕░р╣Ар╕Чр╕и */}
          <button
            onClick={() => {
              setSelectedCategory('р╕лр╕зр╕вр╕лр╕╕р╣Йр╕Щр╕Хр╣Ир╕▓р╕Зр╕Ыр╕гр╕░р╣Ар╕Чр╕и');
              setSelectedLotteryType('р╕лр╕зр╕вр╕Щр╕┤р╣Ар╕Др╕нр╕┤');
            }}
            className={`p-6 rounded-2xl text-white font-bold transition-all min-h-32 flex flex-col items-center justify-center gap-3 ${
              selectedCategory === 'р╕лр╕зр╕вр╕лр╕╕р╣Йр╕Щр╕Хр╣Ир╕▓р╕Зр╕Ыр╕гр╕░р╣Ар╕Чр╕и' 
                ? 'bg-gray-500 shadow-lg' 
                : 'bg-gray-400'
            }`}
          >
            <span className="text-3xl">ЁЯМН</span>
            <span className="text-lg">р╕лр╕зр╕вр╕лр╕╕р╣Йр╕Щр╕Хр╣Ир╕▓р╕Зр╕Ыр╕гр╕░р╣Ар╕Чр╕и</span>
          </button>
        </div>

        {/* р╕Кр╕╖р╣Ир╕нр╕лр╕бр╕зр╕Фр╕лр╕бр╕╣р╣Ир╕Чр╕╡р╣Ир╣Ар╕ер╕╖р╕нр╕Б */}
        <div className="bg-white rounded-2xl p-6 border shadow-sm">
          <h3 className="text-xl font-bold mb-4 text-gray-800 text-center">{selectedCategory}</h3>
          
          {/* р╕гр╕▓р╕вр╕Бр╕▓р╕гр╕лр╕зр╕вр╣Гр╕Щр╕лр╕бр╕зр╕Фр╕лр╕бр╕╣р╣Ир╕Чр╕╡р╣Ир╣Ар╕ер╕╖р╕нр╕Б */}
          <div className="space-y-3">
            {getCurrentCategory().types.map(type => (
              <button
                key={type}
                onClick={() => {
                  setSelectedLotteryType(type);
                  setCheckResult(null);
                }}
                className={`w-full p-4 rounded-xl text-left font-bold transition-all min-h-16 ${
                  selectedLotteryType === type
                    ? 'bg-blue-50 text-blue-800 border-2 border-blue-300 shadow-sm'
                    : 'bg-gray-50 text-gray-700 hover:bg-gray-100'
                }`}
              >
                <div className="flex items-center justify-between">
                  <span className="text-base">{type}</span>
                  {selectedLotteryType === type && (
                    <span className="text-blue-600 text-lg">тЬУ</span>
                  )}
                </div>
              </button>
            ))}
          </div>
        </div>

        {/* р╕Ыр╕╕р╣Ир╕бр╣Др╕Ыр╕Хр╕гр╕зр╕Ир╕лр╕зр╕в */}
        <button 
          onClick={() => setCheckPageMode('check')}
          className="w-full bg-gradient-to-r from-blue-500 to-purple-600 text-white p-6 rounded-2xl font-bold text-xl flex items-center justify-center gap-3 shadow-lg transition-all hover:shadow-xl min-h-20"
        >
          <span className="text-2xl">ЁЯФН</span>
          р╕Хр╕гр╕зр╕И {selectedLotteryType}
        </button>
      </div>
    );
  }

  // р╕лр╕Щр╣Йр╕▓р╕Хр╕гр╕зр╕Ир╕лр╕зр╕в
  return (
    <div className="space-y-6 animate-fadeIn">
      {/* Header р╕Юр╕гр╣Йр╕нр╕бр╕Ыр╕╕р╣Ир╕бр╕Бр╕ер╕▒р╕Ъ */}
      <div className={`bg-gradient-to-r ${getCurrentCategory().color} rounded-2xl p-6 text-white shadow-lg`}>
        <div className="flex items-center gap-3 mb-4">
          <button 
            onClick={() => setCheckPageMode('home')}
            className="bg-white/20 p-2 rounded-lg hover:bg-white/30 transition-colors"
          >
            <span className="text-lg">тЖР</span>
          </button>
          <div className="flex items-center gap-3">
            <div className="text-2xl">{getCurrentCategory().icon}</div>
            <div>
              <div className="text-sm opacity-90">{selectedCategory}</div>
              <div className="text-lg font-bold">{selectedLotteryType}</div>
            </div>
          </div>
        </div>
      </div>

      {/* р╣Бр╕Чр╣Зр╕Ър╕Щр╕│р╕Чр╕▓р╕З */}
      <div className="flex bg-white rounded-xl border overflow-hidden shadow-sm">
        <button
          onClick={() => setShowCheckHistory(false)}
          className={`flex-1 py-3 px-4 font-bold transition-all ${
            !showCheckHistory ? 'bg-blue-500 text-white' : 'bg-gray-100 text-gray-700'
          }`}
        >
          ЁЯФН р╕Хр╕гр╕зр╕Ир╕лр╕зр╕в
        </button>
        <button
          onClick={() => setShowCheckHistory(true)}
          className={`flex-1 py-3 px-4 font-bold transition-all ${
            showCheckHistory ? 'bg-purple-500 text-white' : 'bg-gray-100 text-gray-700'
          }`}
        >
          ЁЯУЛ р╕Ыр╕гр╕░р╕зр╕▒р╕Хр╕┤ ({checkHistory.length})
        </button>
      </div>

      {!showCheckHistory ? (
        <>
          {/* р╕Бр╕гр╕нр╕Бр╣Ар╕ер╕В */}
          <div className="bg-white rounded-2xl p-6 border shadow-sm">
            <h3 className="text-xl font-bold mb-4 text-gray-800">р╣Гр╕кр╣Ир╣Ар╕ер╕Вр╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕Хр╕гр╕зр╕И</h3>
            
            <div className="mb-4">
              <input
                type="text"
                value={checkNumber}
                onChange={(e) => {
                  const value = e.target.value.replace(/\D/g, '');
                  if (value.length <= 6) {
                    setCheckNumber(value);
                    setCheckResult(null);
                  }
                }}
                placeholder="р╣Гр╕кр╣Ир╣Ар╕ер╕Вр╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕Хр╕гр╕зр╕И"
                className="w-full p-4 border-2 border-gray-200 rounded-xl text-2xl text-center font-bold focus:border-blue-500 focus:outline-none"
                maxLength={6}
              />
              <div className="text-center text-sm text-gray-500 mt-2">
                {checkNumber.length}/6 р╕лр╕ер╕▒р╕Б
              </div>
            </div>

            {/* Keypad */}
            <div className="grid grid-cols-3 gap-3 mb-4">
              {[1,2,3,4,5,6,7,8,9,'C',0,'тМл'].map((key, index) => (
                <button
                  key={index}
                  onClick={() => {
                    if (key === 'C') {
                      clearCheck();
                    } else if (key === 'тМл') {
                      setCheckNumber(checkNumber.slice(0, -1));
                      setCheckResult(null);
                    } else if (checkNumber.length < 6) {
                      setCheckNumber(checkNumber + key.toString());
                      setCheckResult(null);
                    }
                  }}
                  className={`p-4 rounded-xl text-xl font-bold transition-all ${
                    key === 'C' || key === 'тМл' 
                      ? 'bg-red-100 text-red-600 hover:bg-red-200' 
                      : 'bg-blue-100 text-blue-600 hover:bg-blue-200'
                  }`}
                >
                  {key}
                </button>
              ))}
            </div>

            <button
              onClick={checkLotteryResult}
              disabled={!checkNumber || isChecking}
              className="w-full bg-gradient-to-r from-green-500 to-blue-600 text-white p-4 rounded-xl font-bold text-lg disabled:bg-gray-300 disabled:cursor-not-allowed shadow-lg hover:shadow-xl transition-all"
            >
              {isChecking ? (
                <div className="flex items-center justify-center gap-2">
                  <div className="w-5 h-5 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                  р╕Бр╕│р╕ер╕▒р╕Зр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ...
                </div>
              ) : (
                <div className="flex items-center justify-center gap-2">
                  ЁЯФН р╕Хр╕гр╕зр╕Ир╕Ьр╕ер╕гр╕▓р╕Зр╕зр╕▒р╕е
                </div>
              )}
            </button>
          </div>

          {/* р╕Ьр╕ер╕Бр╕▓р╕гр╕Хр╕гр╕зр╕И */}
          {checkResult && (
            <div className={`bg-white rounded-2xl p-6 border-2 shadow-lg ${
              checkResult.isWinner ? 'border-green-300' : 'border-red-300'
            }`}>
              <div className="text-center mb-4">
                <div className="text-6xl mb-3">
                  {checkResult.isWinner ? 'ЁЯОЙ' : 'ЁЯШФ'}
                </div>
                <h3 className={`text-2xl font-bold ${
                  checkResult.isWinner ? 'text-green-600' : 'text-red-600'
                }`}>
                  {checkResult.isWinner ? 'р╕вр╕┤р╕Щр╕Фр╕╡р╕Фр╣Йр╕зр╕в! р╕Цр╕╣р╕Бр╕гр╕▓р╕Зр╕зр╕▒р╕е' : 'р╣Ар╕кр╕╡р╕вр╣Гр╕Ир╕Фр╣Йр╕зр╕в р╣Др╕бр╣Ир╕Цр╕╣р╕Бр╕гр╕▓р╕Зр╕зр╕▒р╕е'}
                </h3>
                <div className="text-gray-600 mt-2">
                  р╣Ар╕ер╕В <span className="font-bold text-3xl text-gray-800">{checkResult.number}</span>
                </div>
                <div className="text-sm text-gray-500 mt-1">
                  {checkResult.lottery} - {checkResult.round}
                </div>
              </div>

              {checkResult.isWinner && (
                <div className="bg-green-50 rounded-xl p-4 border border-green-200">
                  <h4 className="font-bold text-green-600 mb-3 text-center flex items-center justify-center gap-2">
                    ЁЯПЖ р╕гр╕▓р╕Зр╕зр╕▒р╕ер╕Чр╕╡р╣Ир╕Цр╕╣р╕Б
                  </h4>
                  <div className="space-y-2">
                    {checkResult.prizes.map((prize, index) => (
                      <div key={index} className="flex justify-between items-center py-2 border-b border-green-200 last:border-b-0">
                        <span className="font-medium">{prize.type}</span>
                        <span className="font-bold text-green-600">
                          {prize.amount.toLocaleString()} р╕Ър╕▓р╕Ч
                        </span>
                      </div>
                    ))}
                  </div>
                  <div className="border-t border-green-200 pt-3 mt-3">
                    <div className="flex justify-between items-center text-lg font-bold">
                      <span>р╕гр╕зр╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф:</span>
                      <span className="text-green-600">
                        {checkResult.totalWinning.toLocaleString()} р╕Ър╕▓р╕Ч
                      </span>
                    </div>
                  </div>
                </div>
              )}
            </div>
          )}

          {/* р╕Ьр╕ер╕гр╕▓р╕Зр╕зр╕▒р╕ер╕ер╣Ир╕▓р╕кр╕╕р╕Ф */}
          <div className="bg-white rounded-2xl p-6 border shadow-sm">
            <div className="flex items-center gap-2 mb-4">
              <span className="text-xl">ЁЯПЖ</span>
              <h3 className="text-lg font-bold text-gray-800">
                р╕Ьр╕ер╕гр╕▓р╕Зр╕зр╕▒р╕е {selectedLotteryType} р╕Зр╕зр╕Фр╕ер╣Ир╕▓р╕кр╕╕р╕Ф
              </h3>
            </div>
            
            <div className="space-y-3">
              <div className="bg-gradient-to-r from-yellow-400 to-orange-500 text-white p-4 rounded-xl text-center">
                <div className="text-sm opacity-90 mb-1">р╕гр╕▓р╕Зр╕зр╕▒р╕ер╕Чр╕╡р╣И 1</div>
                <div className="text-3xl font-bold">{getCurrentResults().results.first}</div>
              </div>

              <div className="grid grid-cols-2 gap-3">
                <div className="bg-blue-50 p-3 rounded-xl text-center border">
                  <div className="text-sm text-gray-600 font-medium">р╣Ар╕ер╕Вр╕лр╕Щр╣Йр╕▓ 3 р╕Хр╕▒р╕з</div>
                  <div className="text-xl font-bold text-blue-600">
                    {getCurrentResults().results.last3front}
                  </div>
                </div>
                <div className="bg-green-50 p-3 rounded-xl text-center border">
                  <div className="text-sm text-gray-600 font-medium">р╣Ар╕ер╕Вр╕Чр╣Йр╕▓р╕в 3 р╕Хр╕▒р╕з</div>
                  <div className="text-xl font-bold text-green-600">
                    {getCurrentResults().results.last3back}
                  </div>
                </div>
              </div>

              <div className="bg-purple-50 p-3 rounded-xl text-center border">
                <div className="text-sm text-gray-600 font-medium">р╣Ар╕ер╕Вр╕Чр╣Йр╕▓р╕в 2 р╕Хр╕▒р╕з</div>
                <div className="text-2xl font-bold text-purple-600">
                  {getCurrentResults().results.last2}
                </div>
              </div>
            </div>
          </div>
        </>
      ) : (
        /* р╕лр╕Щр╣Йр╕▓р╕Ыр╕гр╕░р╕зр╕▒р╕Хр╕┤ */
        <div className="bg-white rounded-2xl p-6 border shadow-sm">
          <h2 className="text-lg font-bold mb-4 text-gray-800">р╕Ыр╕гр╕░р╕зр╕▒р╕Хр╕┤р╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕лр╕зр╕в</h2>
          
          {checkHistory.length === 0 ? (
            <div className="text-center py-8 text-gray-500">
              <div className="text-4xl mb-3">ЁЯУЛ</div>
              <p className="font-medium">р╕вр╕▒р╕Зр╣Др╕бр╣Ир╕бр╕╡р╕Ыр╕гр╕░р╕зр╕▒р╕Хр╕┤р╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕лр╕зр╕в</p>
              <p className="text-sm">р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╕гр╕зр╕Ир╕лр╕зр╕вр╣Ар╕Юр╕╖р╣Ир╕нр╕Фр╕╣р╕Ыр╕гр╕░р╕зр╕▒р╕Хр╕┤</p>
            </div>
          ) : (
            <div className="space-y-3">
              {checkHistory.map((history, index) => (
                <div
                  key={index}
                  className={`p-4 rounded-xl border ${
                    history.isWinner 
                      ? 'border-green-200 bg-green-50' 
                      : 'border-gray-200 bg-gray-50'
                  }`}
                >
                  <div className="flex items-center justify-between mb-2">
                    <div className="flex items-center gap-3">
                      <span className="text-2xl font-bold">{history.number}</span>
                      <span className="text-xl">
                        {history.isWinner ? 'тЬЕ' : 'тЭМ'}
                      </span>
                    </div>
                    <div className="text-right">
                      <div className={`font-bold ${
                        history.isWinner ? 'text-green-600' : 'text-red-600'
                      }`}>
                        {history.isWinner ? `+${history.totalWinning.toLocaleString()}р╕┐` : 'р╣Др╕бр╣Ир╕Цр╕╣р╕Б'}
                      </div>
                    </div>
                  </div>
                  
                  <div className="text-sm text-gray-600">
                    <div className="font-medium">{history.lottery}</div>
                    <div>{new Date(history.timestamp).toLocaleString('th-TH')}</div>
                  </div>

                  {history.isWinner && history.prizes.length > 0 && (
                    <div className="mt-3 pt-3 border-t border-gray-200">
                      <div className="text-xs space-y-1">
                        {history.prizes.map((prize, pIndex) => (
                          <div key={pIndex} className="flex justify-between">
                            <span>{prize.type}</span>
                            <span className="font-bold text-green-600">
                              {prize.amount.toLocaleString()}р╕┐
                            </span>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default CheckPage;